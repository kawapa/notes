Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-10-27T21:41:50+01:00

====== STL ======
Created wtorek 27 października 2020

# `std::bind`

Wrapper na funkcje, który pozwala ją wywoływać bez konieczności podawania wszystkich argumentów (podaje się je wcześniej podczas bind'owania):

```cpp
int foo(int, char, double);
auto bar = bind(bar, _1, 'c', 1.2);

int x = bar(7);		// oznacza wywołanie foo(7, 'c', 1.2)
```

* `_1` to placeholder na pierwszy argument przy wywołaniu funkcji `ff`
* Analogicznie `_2` lub `_3`, na przykład:

```cpp
int foo(int, char, double);
auto bar = bind(foo, _3, _2, _1);	// wolona kolejność

int x = bar(1.2, 'c', 7);			// oznacza wywołanie foo(7, 'c', 1.2);
```

Nie można bind'ować funkcji przeciążonych, kompilator nie będzie wiedział, którą wywołać:

```cpp
int foo(int);
double foo(double);							// foo() jest przeciążona

auto g1 = bind(g, _1);						// ERROR, nie wiadomo które foo()
auto g2 = bind((double(*)(double))g, _1);	// OK, ale wygląda paskudnie
```



# `std::function`

Typ pozwalający przechowywać wynik bindowania, lambdę, funkcję itp.

```cpp
function<float(int x, int y)> foo;

struct int_div {					// take something you can call using ()
	float operator()(int x, int y) const {
		return ((float)x) / y;
	};
};

foo = int_div();					// przypisanie
std::cout << f(5, 3) << endl;		// przykładowe użycie
std::accumulate(b, e, 1, foo);		// zastosowanie z algorytmem
```

`std::function` można stosować z metodami:

```cpp
struct X {
	int foo(int);
};

function<int(X*, int)> f;
f = &X::foo;				// wskaźnik na metodę

X x;
int v = f(&x, 5);			// wywołanie foo() na obiekcie x z argumentem 5

function<int(int)> ff = std::bind(f, &x, _1);	// pierwszy argument dla f to &x
v = ff(5);
```
